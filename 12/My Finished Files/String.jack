// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int length;
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength > 0){
			let str = Array.new(maxLength);
		}
		else{
			let str = 0;
		}
		let length = 0;
		return this;
	}

    /** Disposes this string. */
    method void dispose() {
		if (~(str = 0)){
			do str.dispose();
		}
		do Memory.deAlloc(this);
		return;
	}

    /** Returns the current length of this string. */
    method int length() {
		return length;
	}

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return str[j];
	}

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
	}

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let str[length] = c;
		let length = length + 1;
		return this;
	}

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let length = length - 1;
		let str[length] = 0;
		return;
	}

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int index, result;
		var boolean negFlag;
		
		let negFlag = false;
		let index = 0;
		
		if (str[index] = 45){
			let index = index + 1;
			let negFlag = true;
		}
		
		let result = 0;
		while ((index < length) & (str[index] - 48 > -1) & (str[index] - 48 < 10)){
			let result = result * 10;
			let result = result + str[index]-48;
			let index = index + 1;
		}
		
		if (negFlag) {
			let result = -result;
		}
		
		return result;
	}

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int lastDigit;
		var int c;
		var int tempVal;
		let length = 0; //Clear the string.

		if (val < 0){
			let val = -val;
			do appendChar(45);
		}
		if (val = 0){
			do appendChar(48);
			return;
		}
		
		let tempVal = val;
		
		if (tempVal > 9999){
			let tempVal = val/10000;
			let lastDigit = Math.modulo(tempVal, 10);
			let tempVal = val/10;
			do appendChar(lastDigit + 48);
		}
		if (tempVal > 999){
			let tempVal = val/1000;
			let lastDigit = Math.modulo(tempVal, 10);
			let tempVal = val/100;
			do appendChar(lastDigit + 48);
		}		
		if (tempVal > 99){
			let tempVal = val/100;
			let lastDigit = Math.modulo(tempVal, 10);
			let tempVal = val/1000;
			do appendChar(lastDigit + 48);
		}		
		if (tempVal > 9){
			let tempVal = val/10;
			let lastDigit = Math.modulo(tempVal, 10);
			let tempVal = val/1000;
			do appendChar(lastDigit + 48);
		}
		if (tempVal > 0){
			let tempVal = val;
			let lastDigit = Math.modulo(tempVal, 10);
			do appendChar(lastDigit + 48);
		}
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
	}

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
	}

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
	}
}
